./Cylindrical.cpp:1204:    uint dirID = pp->getDirectionID();
./Cylindrical.cpp:1207:    if(dirID < 6 && dirID > 1 && pp->getPositionCell() != 0)
./Cylindrical.cpp:1209:        cell_cyl * tmp_cell = (cell_cyl *)pp->getPositionCell();
./Cylindrical.cpp:1249:            pp->setPositionCell(center_cells[zID]);
./Cylindrical.cpp:1251:            pp->setPositionCell(grid_cells[rID][phID][zID]);
./Cylindrical.cpp:1255:    Vector3D cy_pos = pp->getPosition().getCylindricalCoord();
./Cylindrical.cpp:1263:        pp->setPositionCell(center_cells[i_z]);
./Cylindrical.cpp:1284:    pp->setPositionCell(grid_cells[i_r][i_ph][i_z]);
./Cylindrical.cpp:1290:    cell_cyl * tmp_cell = (cell_cyl *)pp->getPositionCell();
./Cylindrical.cpp:1291:    Vector3D p = pp->getPosition();
./Cylindrical.cpp:1292:    Vector3D d = pp->getDirection();
./Cylindrical.cpp:1523:    pp->setPosition(p + d * path_length);
./Cylindrical.cpp:1524:    pp->setTmpPathLength(path_length);
./Cylindrical.cpp:1525:    pp->setDirectionID(dirID);
./Cylindrical.cpp:1537:    cell_oc * tmp_cell_pos = (cell_oc *)pp->getPositionCell();
./Cylindrical.cpp:1539:    tmp_pos = pp->getPosition();
./Cylindrical.cpp:1569:    pp->setShortestDistance(min_dist);*/
./Cylindrical.cpp:1580:    Vector3D p = pp->getPosition();
./Cylindrical.cpp:1581:    Vector3D d = pp->getDirection();
./Cylindrical.cpp:1655:    pp->setPosition(p + d * path_length);
./Cylindrical.cpp:1656:    pp->setDirectionID(MAX_UINT);
./GasSpecies.h:334:        cell_basic * cell = pp->getPositionCell();
./GasSpecies.h:355:        cell_basic * cell = pp->getPositionCell();
./Dust.h:426:        uint w = pp->getWavelengthID();
./Dust.h:457:        uint w = pp->getWavelengthID();
./Dust.h:487:        uint w = pp->getWavelengthID();
./Dust.h:517:        uint w = pp->getWavelengthID();
./Dust.h:545:        uint w = pp->getWavelengthID();
./Dust.h:574:        uint w = pp->getWavelengthID();
./Dust.h:604:        uint w = pp->getWavelengthID();
./Dust.h:634:        uint w = pp->getWavelengthID();
./Dust.h:1066:    	cell_basic * cell = pp->getPositionCell();
./Dust.h:1406:                pp->calcRandomDirection();
./Dust.h:1407:                pp->updateCoordSystem();
./Dust.h:1411:                    StokesVector S = pp->getStokesVector();
./Dust.h:1414:                    pp->setStokesVector(S);
./Dust.h:1527://        cell_basic * cell = pp->getPositionCell();
./Dust.h:1541:        cell_basic * cell = pp->getPositionCell();
./Dust.h:1555://        cell_basic * cell = pp->getPositionCell();
./Dust.h:1707:        cell_basic * cell = pp->getPositionCell();
./Dust.h:1728:        cell_basic * cell = pp->getPositionCell();
./Dust.h:1754:        cell_basic * cell = pp->getPositionCell();
./Dust.h:1912:        pp->setPositionCell(cell);
./Dust.h:1917:            pp->setWavelengthID(w);
./Dust.h:1982:        return getAbsRate(grid, pp->getPositionCell(), a, use_energy_density);
./Dust.h:2066:            double rnd = pp->getRND();
./Dust.h:2342:        uint w = pp->getWavelengthID();
./Dust.h:2343:        pp->getStokesVector() *= wavelength_diff[w] / wavelength_diff[wnew];
./Dust.h:3422:        return wavelength_list[pp->getWavelengthID()];
./Dust.h:3961:        return getNumberDensity(grid, pp->getPositionCell());
./Dust.h:3982:        return getNumberDensity(grid, pp->getPositionCell(), i_mixture);
./Dust.h:4005:        return getMassDensity(grid, pp->getPositionCell());
./Dust.h:4026:        return getMassDensity(grid, pp->getPositionCell(), i_mixture);
./Dust.h:4040:        cell_basic * cell = pp->getPositionCell();
./Dust.h:4055:        cell_basic * cell = pp->getPositionCell();
./Dust.h:4184:            uint w = pp->getWavelengthID();
./Dust.h:4270:                double rnd = pp->getRND();
./Dust.h:4295:                double rnd = pp->getRND();
./Source.cpp:163:    pp->initRandomGenerator(i_pos);
./Source.cpp:164:    pp->calcRandomDirection();
./Source.cpp:166:    if(pp->getWavelengthID() != MAX_UINT)
./Source.cpp:168:        wID = pp->getWavelengthID();
./Source.cpp:187:        wID = lam_pf.getXIndex(pp->getRND());
./Source.cpp:200:        pp->setWavelengthID(wID + 1);
./Source.cpp:203:    pp->setPosition(pos);
./Source.cpp:204:    pp->setStokesVector(tmp_stokes_vector);
./Source.cpp:205:    pp->initCoordSystem();
./Source.cpp:215:    if(pp->getWavelengthID() != MAX_UINT)
./Source.cpp:217:        wID = pp->getWavelengthID();
./Source.cpp:235:        wID = lam_pf.getXIndex(pp->getRND());
./Source.cpp:248:        pp->setWavelengthID(wID + 1);
./Source.cpp:254:        pp->setDirection(dir_obs);
./Source.cpp:255:        pp->initCoordSystem();
./Source.cpp:258:    pp->setPosition(pos);
./Source.cpp:259:    pp->setStokesVector(tmp_stokes_vector);
./Source.cpp:413:    pp->initRandomGenerator(i_pos);
./Source.cpp:414:    pp->calcRandomDirection();
./Source.cpp:416:    double len = pp->randn(0, var);
./Source.cpp:418:    pos = len * pp->getDirection();
./Source.cpp:421:    if(pp->getWavelengthID() != MAX_UINT)
./Source.cpp:425:            wID = pp->getWavelengthID();
./Source.cpp:441:        wID = lam_pf.getXIndex(pp->getRND());
./Source.cpp:446:        pp->setWavelengthID(wID + 1);
./Source.cpp:449:    pp->setPosition(pos);
./Source.cpp:450:    pp->setStokesVector(tmp_stokes_vector);
./Source.cpp:451:    pp->initCoordSystem();
./Source.cpp:460:    double len = pp->randn(0, var);
./Source.cpp:462:    pos = len * pp->getDirection();
./Source.cpp:465:    if(pp->getWavelengthID() != MAX_UINT)
./Source.cpp:469:            wID = pp->getWavelengthID();
./Source.cpp:485:        wID = lam_pf.getXIndex(pp->getRND());
./Source.cpp:490:        pp->setWavelengthID(wID + 1);
./Source.cpp:496:        pp->setDirection(dir_obs);
./Source.cpp:497:        pp->initCoordSystem();
./Source.cpp:500:    pp->setPosition(pos);
./Source.cpp:501:    pp->setStokesVector(tmp_stokes_vector);
./Source.cpp:696:    Vector3D pos = pp->getPosition();
./Source.cpp:698:    uint wID = pp->getWavelengthID();
./Source.cpp:884:    pp->initRandomGenerator(i_pos);
./Source.cpp:887:    if(pp->getWavelengthID() != MAX_UINT)
./Source.cpp:889:        wID = pp->getWavelengthID();
./Source.cpp:897:        wID = lam_pf.getXIndex(pp->getRND());
./Source.cpp:902:        pp->setWavelengthID(wID + 1);
./Source.cpp:907:    e.rndDir(pp->getRND(), pp->getRND());
./Source.cpp:912:    pp->calcRandomDirection();
./Source.cpp:913:    while(pp->getDirection() * e >= 0)
./Source.cpp:914:        pp->calcRandomDirection();
./Source.cpp:915:    pp->initCoordSystem();
./Source.cpp:919:    pp->setPosition(pos);
./Source.cpp:920:    pp->setStokesVector(tmp_stokes_vector);
./Source.cpp:929:    if(pp->getWavelengthID() != MAX_UINT)
./Source.cpp:931:        wID = pp->getWavelengthID();
./Source.cpp:939:        wID = lam_pf.getXIndex(pp->getRND());
./Source.cpp:944:        pp->setWavelengthID(wID + 1);
./Source.cpp:949:    e.rndDir(pp->getRND(), pp->getRND());
./Source.cpp:957:        pp->setDirection(dir_obs);
./Source.cpp:958:        pp->initCoordSystem();
./Source.cpp:963:    pp->setPosition(pos);
./Source.cpp:964:    pp->setStokesVector(tmp_stokes_vector);
./Source.cpp:995:        pp->setWavelengthID(w);
./Source.cpp:1022:            pp->setPositionCell(grid->getCellFromIndex(i_cell));
./Source.cpp:1060:    pp->setWavelengthID(w);
./Source.cpp:1090:        pp->setPositionCell(grid->getCellFromIndex(i_cell));
./Source.cpp:1111:    pp->initRandomGenerator(i_pos);
./Source.cpp:1112:    pp->calcRandomDirection();
./Source.cpp:1115:    uint w = pp->getWavelengthID();
./Source.cpp:1118:    double rnd = pp->getRND();
./Source.cpp:1124:    pp->setPositionCell(grid->getCellFromIndex(i_cell));
./Source.cpp:1133:    pp->setStokesVector(StokesVector(energy, 0, 0, 0));
./Source.cpp:1136:    pp->initCoordSystem();
./Source.cpp:1142:    uint w = pp->getWavelengthID();
./Source.cpp:1145:    double rnd = pp->getRND();
./Source.cpp:1151:    pp->setPositionCell(grid->getCellFromIndex(i_cell));
./Source.cpp:1160:    pp->setStokesVector(StokesVector(energy, 0, 0, 0));
./Source.cpp:1165:        pp->setDirection(dir_obs);
./Source.cpp:1166:        pp->initCoordSystem();
./Source.cpp:1224:    pp->initRandomGenerator(i_pos);
./Source.cpp:1225:    pp->setDirection(dir);
./Source.cpp:1226:    pp->setPosition(pos);
./Source.cpp:1228:    if(pp->getWavelengthID() != MAX_UINT)
./Source.cpp:1230:        wID = pp->getWavelengthID();
./Source.cpp:1234:        wID = lam_pf.getXIndex(pp->getRND());
./Source.cpp:1237:        pp->setWavelengthID(wID + 1);
./Source.cpp:1243:    pp->setStokesVector(tmp_stokes_vector);
./Source.cpp:1244:    pp->initCoordSystem();
./Source.cpp:1252:    pp->setDirection(dir);
./Source.cpp:1253:    pp->setPosition(pos);
./Source.cpp:1255:    if(dir_obs == dir && pp->getWavelengthID() != MAX_UINT)
./Source.cpp:1257:        uint wID = pp->getWavelengthID();
./Source.cpp:1263:    pp->setStokesVector(tmp_stokes_vector);
./Source.cpp:1268:        pp->initCoordSystem();
./Raytracing.h:204:        pp->setPosition(pos);
./Raytracing.h:205:        pp->setEX(ex);
./Raytracing.h:206:        pp->setEY(ey);
./Raytracing.h:207:        pp->setEZ(ez);
./Raytracing.h:212:        pp->setPosition(pos);
./Raytracing.h:213:        pp->setEX(ex);
./Raytracing.h:214:        pp->setEY(ey);
./Raytracing.h:215:        pp->setEZ(ez);
./Raytracing.h:222:        pp->setEX(ex);
./Raytracing.h:223:        pp->setEY(ey);
./Raytracing.h:224:        pp->setEZ(ez);
./Raytracing.h:720:                    ID_sum_1 += pp->getPositionCell()->getUniqueID();
./Raytracing.h:750:                            ID_sum_2 += pp->getPositionCell()->getUniqueID();
./Raytracing.h:771:        pp->setDetectorProjection();
./Raytracing.h:775:            pp->setWavelengthID(i_spectral);
./Raytracing.h:779:                pp->getMultiStokesVector(i_spectral) *= getMinArea();
./Raytracing.h:1032:        Vector3D ph_dir = pp->getDirection();
./Raytracing.h:1033:        Vector3D ph_pos = pp->getPosition();
./Raytracing.h:1065:        pp->setPosition(start_pos);
./Raytracing.h:1066:        pp->setEX(tmp_ex);
./Raytracing.h:1067:        pp->setEY(-tmp_ey);
./Raytracing.h:1068:        pp->setEZ(-tmp_ez);
./Raytracing.h:1073:        pp->setPosition(pos);
./Raytracing.h:1092:        pp->setEX(tmp_ex);
./Raytracing.h:1093:        pp->setEY(-tmp_ey);
./Raytracing.h:1094:        pp->setEZ(-tmp_ez);
./Raytracing.h:1100:        Vector3D pos = pp->getPosition();
./Raytracing.h:1105:        pp->setEZ(dir);
./Raytracing.h:1155:            pp->setWavelengthID(i_spectral);
./Raytracing.h:1159:                pp->getMultiStokesVector(i_spectral) *= getMinArea();
./Raytracing.h:1642:            pp->setDetectorProjection();
./Raytracing.h:1646:                pp->setWavelengthID(i_spectral);
./Raytracing.h:1660:                pp->setWavelengthID(i_spectral + spectral_offset);
./Raytracing.h:1662:                StokesVector st = pp->getMultiStokesVector(i_spectral);
./Raytracing.h:1686:            pp->initMultiStokesVector(nr_spectral_bins);
./Raytracing.h:1724:                    pp->setWavelengthID(i_spectral);
./Raytracing.h:1727:                    pp->setMultiStokesVector(tmpStokes[i_spectral][npix_r][0] * getMinArea(), i_spectral);
./Raytracing.h:1737:            pp->setPosition(pos);
./Raytracing.h:1792:                pp->setWavelengthID(i_spectral);
./Raytracing.h:1827:                pp->setMultiStokesVector(res_stokes * getMinArea(), i_spectral);
./Raytracing.h:2097:        pp->setPosition(pos);
./Raytracing.h:2098:        pp->setEX(ex);
./Raytracing.h:2099:        pp->setEY(ey);
./Raytracing.h:2100:        pp->setEZ(ez);
./Raytracing.h:2107:        pp->setPosition(Vector3D(cx, cy, 0));
./Raytracing.h:2116:            pp->setWavelengthID(i_spectral);
./Raytracing.h:2120:                pp->getMultiStokesVector(i_spectral) *= getMinArea();
./RadiativeTransfer.h:220:        double energy = pp->getTmpPathLength() * pp->getStokesVector().I();  //L(lambda) & delta_l?
./RadiativeTransfer.h:225:            Vector3D rad_field_dir = grid->rotateToCenter(pp, pp->getDirection());
./RadiativeTransfer.h:240:                    if(dust->getWavelengthID(tracer[i_det]->getWavelength(i_wave)) == pp->getWavelengthID())
./OcTree.h:256:        Vector3D pos = pp->getPosition();
./OcTree.h:312:        cell_oc * cell_pos = (cell_oc *)pp->getPositionCell();
./OcTree.h:322:        pp->setPositionCell(cell_oc_root);
./OcTree.h:380:        cell_oc * tmp_cell = (cell_oc *)pp->getPositionCell();
./OcTree.h:384:            Vector3D pos = pp->getPosition();
./OcTree.h:385:            Vector3D center = getCenter(pp->getPositionCell());
./OcTree.h:426:            pp->setPositionCell(tmp_cell);
./OcTree.h:480:        cell_oc * tmp_cell = (cell_oc *)pp->getPositionCell();
./OcTree.h:490:        pp->setPositionCell(tmp_cell);
./OcTree.h:492:        if(!isInside(pp->getPosition(), tmp_cell))
./OcTree.h:536:        cell_oc * cell = (cell_oc *)pp->getPositionCell();
./OcTree.h:549:        cell_oc * tmp_cell = (cell_oc *)pp->getPositionCell();
./OcTree.h:559:        double rnd_x = pp->getRND();
./OcTree.h:560:        double rnd_y = pp->getRND();
./OcTree.h:561:        double rnd_z = pp->getRND();
./OcTree.h:564:        pp->setPosition(pos);
./Dust.cpp:2980:    uint w = pp->getWavelengthID();
./Dust.cpp:3153:    uint w = pp->getWavelengthID();
./Dust.cpp:3458:    double rnd1 = pp->getRND();
./Dust.cpp:3484:    pp->setWavelengthID(wIDnew + 1);
./Dust.cpp:4846:	pp->setWavelengthID(wID);
./Dust.cpp:6491:    uint w = pp->getWavelengthID();
./Dust.cpp:6521:    uint w = pp->getWavelengthID();
./Dust.cpp:6597:    uint w = pp->getWavelengthID();
./Dust.cpp:6603:    double scattering_theta = acos(en_dir * pp->getDirection());
./Dust.cpp:6653:    double phi_map = CMathFunctions::getRotationAngleObserver(en_dir, pp->getEY(), pp->getEX());
./Dust.cpp:6680:        scattering_theta = acos(en_dir * pp->getDirection());
./Dust.cpp:6681:        phi_map = CMathFunctions::getRotationAngleObserver(en_dir, pp->getEY(), pp->getEX());
./Dust.cpp:6695:    uint w = pp->getWavelengthID();
./Dust.cpp:6896:            uint w = pp->getWavelengthID();
./Dust.cpp:6901:            Matrix2D D_photon = pp->getD();
./Dust.cpp:6912:            StokesVector tmp_stokes = pp->getStokesVector();
./Dust.cpp:6921:            pp_res.setPosition(pp->getPosition());
./Dust.cpp:6922:            pp_res.setPositionCell(pp->getPositionCell());
./Dust.cpp:6966:    uint w = pp->getWavelengthID();
./Dust.cpp:6969:    StokesVector tmp_stokes = pp->getStokesVector();
./Dust.cpp:6975:    pp_res.setPosition(pp->getPosition());
./Dust.cpp:6976:    pp_res.setPositionCell(pp->getPositionCell());
./Dust.cpp:6979:    pp_res.setD(pp->getD());
./Dust.cpp:6984:    Matrix2D D_photon = pp->getD();
./Dust.cpp:7072:    cell_basic * cell = pp->getPositionCell();
./Dust.cpp:7081:    uint w = pp->getWavelengthID();
./Dust.cpp:7114:    double z1 = pp->getRND();
./Dust.cpp:7115:    double z2 = pp->getRND();
./Dust.cpp:7118:    double w = pp->getWavelengthID();
./Dust.cpp:7126:        pp->calcRandomDirection();
./Dust.cpp:7127:        pp->updateCoordSystem();
./Dust.cpp:7149:    pp->updateCoordSystem(phi, theta);
./Dust.cpp:7153:        StokesVector tmp_stokes = pp->getStokesVector();
./Dust.cpp:7156:        pp->setStokesVector(tmp_stokes);
./Dust.cpp:7166:    uint w = pp->getWavelengthID();
./Dust.cpp:7169:    double theta = findTheta(a, w, pp->getRND());
./Dust.cpp:7175:    StokesVector tmp_stokes = pp->getStokesVector();
./Dust.cpp:7186:    double rndx = pp->getRND();
./Dust.cpp:7200:                phi = pp->getRND() * PIx2;
./Dust.cpp:7253:    pp->updateCoordSystem(phi, theta);
./Dust.cpp:7264:        pp->setStokesVector(tmp_stokes);
./Spherical.cpp:1348:    uint dirID = pp->getDirectionID();
./Spherical.cpp:1350:    if(dirID < 6 && pp->getPositionCell() != 0)
./Spherical.cpp:1352:        cell_sp * tmp_cell = (cell_sp *)pp->getPositionCell();
./Spherical.cpp:1396:    Vector3D sp_pos = pp->getPosition().getSphericalCoord();
./Spherical.cpp:1400:        pp->setPositionCell(center_cell);
./Spherical.cpp:1421:    pp->setPositionCell(grid_cells[i_r][i_ph][i_th]);
./Spherical.cpp:1428:    cell_sp * tmp_cell = (cell_sp *)pp->getPositionCell();
./Spherical.cpp:1429:    Vector3D p = pp->getPosition();
./Spherical.cpp:1430:    Vector3D d = pp->getDirection();
./Spherical.cpp:1653:    pp->setPosition(p + d * path_length);
./Spherical.cpp:1654:    pp->setTmpPathLength(path_length);
./Spherical.cpp:1655:    pp->setDirectionID(dirID);
./Spherical.cpp:1667:    cell_oc * tmp_cell_pos = (cell_oc *)pp->getPositionCell();
./Spherical.cpp:1669:    tmp_pos = pp->getPosition();
./Spherical.cpp:1699:    pp->setShortestDistance(min_dist);
./Spherical.cpp:1705:    Vector3D p = pp->getPosition();
./Spherical.cpp:1706:    Vector3D d = pp->getDirection();
./Spherical.cpp:1744:    pp->setPosition(p + d * path_length);
./Spherical.cpp:1745:    pp->setDirectionID(MAX_UINT);
./Grid.cpp:1306:                pp->setPosition(Vector3D(tx, ty, tz));
./Grid.cpp:1508:    pp->setPosition(Vector3D(0, 0, 2.0 * max_len));
./Grid.cpp:1509:    pp->setDirection(Vector3D(0.0001, 0.0001, -1.00001).normalized());
./Grid.cpp:1517:        double pos = pp->getPosition().Z();
./Grid.cpp:1551:    pp->setPosition(Vector3D(0, 2.0 * max_len, 0));
./Grid.cpp:1552:    pp->setDirection(Vector3D(0.0001, -1.00001, 0.0001).normalized());
./Grid.cpp:1559:        double pos = pp->getPosition().Y();
./Grid.cpp:1592:    pp->setPosition(Vector3D(2.0 * max_len, 0, 0));
./Grid.cpp:1593:    pp->setDirection(Vector3D(-1.00001, 0.0001, 0.0001).normalized());
./Grid.cpp:1599:        double pos = pp->getPosition().X();
./Grid.cpp:1686:    pp->setPosition(Vector3D(0, 0, 2.0 * max_len));
./Grid.cpp:1687:    pp->setDirection(Vector3D(0.0001, 0.0001, -1.00001).normalized());
./Grid.cpp:1695:        double pos = pp->getPosition().Z();
./Grid.cpp:1762:    pp->setPosition(Vector3D(0, 2.0 * max_len, 0));
./Grid.cpp:1763:    pp->setDirection(Vector3D(0.0001, -1.00001, 0.0001).normalized());
./Grid.cpp:1771:        double pos = pp->getPosition().Y();
./Grid.cpp:1837:    pp->setPosition(Vector3D(2.0 * max_len, 0, 0));
./Grid.cpp:1838:    pp->setDirection(Vector3D(-1.00001, 0.0001, 0.0001).normalized());
./Grid.cpp:1844:        double pos = pp->getPosition().X();
./OcTree.cpp:1545:    cell_oc * tmp_cell = (cell_oc *)pp->getPositionCell();
./OcTree.cpp:1550:    Vector3D p = pp->getPosition();
./OcTree.cpp:1551:    Vector3D d = pp->getDirection();
./OcTree.cpp:1634:    pp->setPosition(p + d * path_length);
./OcTree.cpp:1635:    pp->setTmpPathLength(path_length);
./OcTree.cpp:1647:    cell_oc * tmp_cell_pos = (cell_oc *)pp->getPositionCell();
./OcTree.cpp:1649:    tmp_pos = pp->getPosition();
./OcTree.cpp:1679:    pp->setShortestDistance(min_dist);
./OcTree.cpp:1694: cell_oc * tmp_cell_pos = (cell_oc*)pp->getPositionCell();
./OcTree.cpp:1696: tmp_pos_xyz = pp->getPosition();
./OcTree.cpp:1697: tmp_dir_xyz = pp->getDirection();
./OcTree.cpp:1757: pp->setShortestDistance(min_dist);
./OcTree.cpp:1875:    Vector3D p = pp->getPosition();
./OcTree.cpp:1882:    Vector3D d = pp->getDirection();
./OcTree.cpp:1965:    pp->setPosition(p + d * path_length);
./Pipeline.cpp:1914:                pp->setPosition(Vector3D(tx, ty, tz));
./Pipeline.cpp:1925:                    double FgraX = pp->getPositionCell()->getData(data_off + 0);
./Pipeline.cpp:1926:                    double FgraY = pp->getPositionCell()->getData(data_off + 1);
./Pipeline.cpp:1927:                    double FgraZ = pp->getPositionCell()->getData(data_off + 2);
./Pipeline.cpp:1929:                    double FradX = pp->getPositionCell()->getData(data_off + 3 + 0);
./Pipeline.cpp:1930:                    double FradY = pp->getPositionCell()->getData(data_off + 3 + 1);
./Pipeline.cpp:1931:                    double FradZ = pp->getPositionCell()->getData(data_off + 3 + 2);
./Pipeline.cpp:1982:    pp->setPosition(Vector3D(0, 0, 0));
./Pipeline.cpp:1983:    pp->setDirection(Vector3D(1.001, 1, 1).normalized());
./Pipeline.cpp:1993:        double FgraX = pp->getPositionCell()->getData(data_off + 0);
./Pipeline.cpp:1994:        double FgraY = pp->getPositionCell()->getData(data_off + 1);
./Pipeline.cpp:1995:        double FgraZ = pp->getPositionCell()->getData(data_off + 2);
./Pipeline.cpp:1997:        double FradX = pp->getPositionCell()->getData(data_off + 3 + 0);
./Pipeline.cpp:1998:        double FradY = pp->getPositionCell()->getData(data_off + 3 + 1);
./Pipeline.cpp:1999:        double FradZ = pp->getPositionCell()->getData(data_off + 3 + 2);
./Pipeline.cpp:2001:        v_pos[pos_counter] = pp->getPosition().X();
./Pipeline.cpp:2009:    pp->setPosition(Vector3D(0, 0, 0));
./Pipeline.cpp:2010:    pp->setDirection(Vector3D(1.001, 1, -1).normalized());
./Pipeline.cpp:2019:        double FgraX = pp->getPositionCell()->getData(data_off + 0);
./Pipeline.cpp:2020:        double FgraY = pp->getPositionCell()->getData(data_off + 1);
./Pipeline.cpp:2021:        double FgraZ = pp->getPositionCell()->getData(data_off + 2);
./Pipeline.cpp:2023:        double FradX = pp->getPositionCell()->getData(data_off + 3 + 0);
./Pipeline.cpp:2024:        double FradY = pp->getPositionCell()->getData(data_off + 3 + 1);
./Pipeline.cpp:2025:        double FradZ = pp->getPositionCell()->getData(data_off + 3 + 2);
./Pipeline.cpp:2034:    pp->setPosition(Vector3D(0, 0, 0));
./Pipeline.cpp:2035:    pp->setDirection(Vector3D(1.001, -1, 1).normalized());
./Pipeline.cpp:2044:        double FgraX = pp->getPositionCell()->getData(data_off + 0);
./Pipeline.cpp:2045:        double FgraY = pp->getPositionCell()->getData(data_off + 1);
./Pipeline.cpp:2046:        double FgraZ = pp->getPositionCell()->getData(data_off + 2);
./Pipeline.cpp:2048:        double FradX = pp->getPositionCell()->getData(data_off + 3 + 0);
./Pipeline.cpp:2049:        double FradY = pp->getPositionCell()->getData(data_off + 3 + 1);
./Pipeline.cpp:2050:        double FradZ = pp->getPositionCell()->getData(data_off + 3 + 2);
./Pipeline.cpp:2059:    pp->setPosition(Vector3D(0, 0, 0));
./Pipeline.cpp:2060:    pp->setDirection(Vector3D(1.001, -1, -1).normalized());
./Pipeline.cpp:2069:        double FgraX = pp->getPositionCell()->getData(data_off + 0);
./Pipeline.cpp:2070:        double FgraY = pp->getPositionCell()->getData(data_off + 1);
./Pipeline.cpp:2071:        double FgraZ = pp->getPositionCell()->getData(data_off + 2);
./Pipeline.cpp:2073:        double FradX = pp->getPositionCell()->getData(data_off + 3 + 0);
./Pipeline.cpp:2074:        double FradY = pp->getPositionCell()->getData(data_off + 3 + 1);
./Pipeline.cpp:2075:        double FradZ = pp->getPositionCell()->getData(data_off + 3 + 2);
./Pipeline.cpp:2084:    pp->setPosition(Vector3D(0, 0, 0));
./Pipeline.cpp:2085:    pp->setDirection(Vector3D(-1.001, 1, 1).normalized());
./Pipeline.cpp:2094:        double FgraX = pp->getPositionCell()->getData(data_off + 0);
./Pipeline.cpp:2095:        double FgraY = pp->getPositionCell()->getData(data_off + 1);
./Pipeline.cpp:2096:        double FgraZ = pp->getPositionCell()->getData(data_off + 2);
./Pipeline.cpp:2098:        double FradX = pp->getPositionCell()->getData(data_off + 3 + 0);
./Pipeline.cpp:2099:        double FradY = pp->getPositionCell()->getData(data_off + 3 + 1);
./Pipeline.cpp:2100:        double FradZ = pp->getPositionCell()->getData(data_off + 3 + 2);
./Pipeline.cpp:2109:    pp->setPosition(Vector3D(0, 0, 0));
./Pipeline.cpp:2110:    pp->setDirection(Vector3D(-1.001, 1, -1).normalized());
./Pipeline.cpp:2119:        double FgraX = pp->getPositionCell()->getData(data_off + 0);
./Pipeline.cpp:2120:        double FgraY = pp->getPositionCell()->getData(data_off + 1);
./Pipeline.cpp:2121:        double FgraZ = pp->getPositionCell()->getData(data_off + 2);
./Pipeline.cpp:2123:        double FradX = pp->getPositionCell()->getData(data_off + 3 + 0);
./Pipeline.cpp:2124:        double FradY = pp->getPositionCell()->getData(data_off + 3 + 1);
./Pipeline.cpp:2125:        double FradZ = pp->getPositionCell()->getData(data_off + 3 + 2);
./Pipeline.cpp:2134:    pp->setPosition(Vector3D(0, 0, 0));
./Pipeline.cpp:2135:    pp->setDirection(Vector3D(-1.001, -1, 1).normalized());
./Pipeline.cpp:2145:        double FgraX = pp->getPositionCell()->getData(data_off + 0);
./Pipeline.cpp:2146:        double FgraY = pp->getPositionCell()->getData(data_off + 1);
./Pipeline.cpp:2147:        double FgraZ = pp->getPositionCell()->getData(data_off + 2);
./Pipeline.cpp:2149:        double FradX = pp->getPositionCell()->getData(data_off + 3 + 0);
./Pipeline.cpp:2150:        double FradY = pp->getPositionCell()->getData(data_off + 3 + 1);
./Pipeline.cpp:2151:        double FradZ = pp->getPositionCell()->getData(data_off + 3 + 2);
./Pipeline.cpp:2160:    pp->setPosition(Vector3D(0.1, 0.1, 0.1));
./Pipeline.cpp:2161:    pp->setDirection(Vector3D(-1.001, -1, -1).normalized());
./Pipeline.cpp:2170:        double FgraX = pp->getPositionCell()->getData(data_off + 0);
./Pipeline.cpp:2171:        double FgraY = pp->getPositionCell()->getData(data_off + 1);
./Pipeline.cpp:2172:        double FgraZ = pp->getPositionCell()->getData(data_off + 2);
./Pipeline.cpp:2174:        double FradX = pp->getPositionCell()->getData(data_off + 3 + 0);
./Pipeline.cpp:2175:        double FradY = pp->getPositionCell()->getData(data_off + 3 + 1);
./Pipeline.cpp:2176:        double FradZ = pp->getPositionCell()->getData(data_off + 3 + 2);
./RadiativeTransfer.cpp:570:                    pp->setWavelengthID(wID);
./RadiativeTransfer.cpp:576:                if(pp->getStokesVector().I() < 1e-200)
./RadiativeTransfer.cpp:592:                end_tau = -log(1.0 - pp->getRND());
./RadiativeTransfer.cpp:595:                old_pos = pp->getPosition();
./RadiativeTransfer.cpp:620:                        old_pos = pp->getPosition();
./RadiativeTransfer.cpp:625:                    len = pp->getTmpPathLength();
./RadiativeTransfer.cpp:652:                        pp->adjustPosition(old_pos, len * end_tau / tmp_tau);
./RadiativeTransfer.cpp:676:                            if(pp->getRND() < albedo)
./RadiativeTransfer.cpp:690:                                    pp->calcRandomDirection();
./RadiativeTransfer.cpp:705:                        end_tau = -log(1.0 - pp->getRND());
./RadiativeTransfer.cpp:716:                    old_pos = pp->getPosition();
./RadiativeTransfer.cpp:970:                        pp->setWavelengthID(wID);
./RadiativeTransfer.cpp:984:                        start_pos = pp->getPosition();
./RadiativeTransfer.cpp:989:                        pp->updatePositionLastInteraction();
./RadiativeTransfer.cpp:1001:                                end_tau = -log(1.0 - pp->getRND());
./RadiativeTransfer.cpp:1007:                            end_tau = -log(1.0 - pp->getRND());
./RadiativeTransfer.cpp:1013:                        end_tau = -log(1.0 - pp->getRND());
./RadiativeTransfer.cpp:1022:                    old_pos = pp->getPosition();
./RadiativeTransfer.cpp:1029:                        if(interactions >= MAX_INTERACTION || pp->getStokesVector().I() < 1e-200)
./RadiativeTransfer.cpp:1042:                            old_pos = pp->getPosition();
./RadiativeTransfer.cpp:1051:                        len = pp->getTmpPathLength();
./RadiativeTransfer.cpp:1065:                            pp->adjustPosition(old_pos, len);
./RadiativeTransfer.cpp:1070:                                rays[1].initRandomGenerator(int(r * pp->getRND()));
./RadiativeTransfer.cpp:1071:                                rays[1].setWavelengthID(pp->getWavelengthID());
./RadiativeTransfer.cpp:1072:                                rays[1].setPosition(pp->getPosition());
./RadiativeTransfer.cpp:1073:                                rays[1].setPositionCell(pp->getPositionCell());
./RadiativeTransfer.cpp:1075:                                rays[1].setDirection(pp->getDirection());
./RadiativeTransfer.cpp:1077:                                pp->setStokesVector(pp->getStokesVector() - rays[1].getStokesVector());
./RadiativeTransfer.cpp:1083:                            pp->updatePositionLastInteraction();
./RadiativeTransfer.cpp:1143:                            end_tau = -log(1.0 - pp->getRND());
./RadiativeTransfer.cpp:1151:                        old_pos = pp->getPosition();
./RadiativeTransfer.cpp:1156:                    if(!peel_off && pp->getStokesVector().I() > 1e-200 && interactions <= MAX_INTERACTION)
./RadiativeTransfer.cpp:1159:                        pp->resetPositionToLastInteraction();
./RadiativeTransfer.cpp:1176:                                double cos_angle = pp->getDirection() * dir_obs;
./RadiativeTransfer.cpp:1188:                                        detector[d].getEX(), pp->getEX(), pp->getEY());
./RadiativeTransfer.cpp:1191:                                    pp->getStokesVector().rot(rot_angle_phot_obs);
./RadiativeTransfer.cpp:1195:                                    pp->getStokesVector() *= 1.0 / ((1.0 - cos_acceptance_angle) * PIx2);
./RadiativeTransfer.cpp:1199:                                    CMathFunctions::lum2Jy(pp->getStokesVector(),
./RadiativeTransfer.cpp:1204:                                    pp->getStokesVector() *=
./RadiativeTransfer.cpp:2601:        pp->initMultiStokesVector(nr_used_wavelengths);
./RadiativeTransfer.cpp:2654:        pp->setWavelengthID(wID);
./RadiativeTransfer.cpp:2677:                double len = pp->getTmpPathLength();
./RadiativeTransfer.cpp:2704:                    pp->setWavelengthID(wID);
./RadiativeTransfer.cpp:2721:                    pp->setWavelengthID(wID);
./RadiativeTransfer.cpp:2738:                    Vector3D dir_map_xyz = pp->getDirection();
./RadiativeTransfer.cpp:2742:                    Vector3D pos_xyz_cell = pp->getPosition() - (len * dir_map_xyz);
./RadiativeTransfer.cpp:2864:        pp->setMultiStokesVector(WMap.S(i_wave), i_wave);
./RadiativeTransfer.cpp:2890:        pp->initMultiStokesVector(nr_used_wavelengths);
./RadiativeTransfer.cpp:2907:            pp->setWavelengthID(wID);
./RadiativeTransfer.cpp:2916:            WMap.setS(pp->getStokesVector(), i_wave);
./RadiativeTransfer.cpp:2928:                double len = pp->getTmpPathLength();
./RadiativeTransfer.cpp:2938:            pp->setMultiStokesVector(WMap.S(i_wave) * mult, i_wave);
./RadiativeTransfer.cpp:3090:        pp->initMultiStokesVector(nr_velocity_channels);
./RadiativeTransfer.cpp:3154:    pp->setWavelengthID(wID);
./RadiativeTransfer.cpp:3165:            Vector3D pos_in_grid_0 = tmp_pp->getPosition();
./RadiativeTransfer.cpp:3169:                Vector3D dir_map_xyz = tmp_pp->getDirection();
./RadiativeTransfer.cpp:3170:                Vector3D pos_xyz_cell = tmp_pp->getPosition() - (tmp_pp->getTmpPathLength() * dir_map_xyz);
./RadiativeTransfer.cpp:3173:                cell_basic * tmp_cell_pos = tmp_pp->getPositionCell();
./RadiativeTransfer.cpp:3177:                    CMathFunctions::getClosestLinePoint(pos_xyz_cell, tmp_pp->getPosition(), cell_center);
./RadiativeTransfer.cpp:3201:        Vector3D pos_in_grid_0 = pp->getPosition();
./RadiativeTransfer.cpp:3204:        pp->setWavelengthID(wID);
./RadiativeTransfer.cpp:3225:                double len = pp->getTmpPathLength();
./RadiativeTransfer.cpp:3250:                    Vector3D dir_map_xyz = pp->getDirection();
./RadiativeTransfer.cpp:3251:                    Vector3D pos_xyz_cell = pp->getPosition() - (len * dir_map_xyz);
./RadiativeTransfer.cpp:3481:        pp->setMultiStokesVector(CHMap.S(vch), vch);
./Voronoi.h:253:        cell_basic * cell_pos = pp->getPositionCell();
./build/CMakeFiles/Makefile.cmake:71:  "/snap/cmake/1204/share/cmake-3.25/Modules/Compiler/IBMCPP-C-DetermineVersionInternal.cmake"
./build/CMakeFiles/Makefile.cmake:72:  "/snap/cmake/1204/share/cmake-3.25/Modules/Compiler/IBMCPP-CXX-DetermineVersionInternal.cmake"
./Cylindrical.h:392:        cell_basic * cell_pos = pp->getPositionCell();
./Cylindrical.h:398:        cell_cyl * cell_pos = (cell_cyl *)pp->getPositionCell();
./Cylindrical.h:399:        double phi = pp->getPosition().getPhiCoord();
./Cylindrical.h:575:        return isInside(pos, pp->getPositionCell());
./Cylindrical.h:581:        cell_cyl * tmp_cell = (cell_cyl *)pp->getPositionCell();
./Cylindrical.h:584:        double rnd_r = pp->getRND();
./Cylindrical.h:585:        double rnd_ph = pp->getRND();
./Cylindrical.h:586:        double rnd_z = pp->getRND();
./Cylindrical.h:615:        pp->setPosition(pos);
./Voronoi.cpp:1142:    Vector3D pos = pp->getPosition();
./Voronoi.cpp:1175:            pp->setPositionCell(tmp_cell);
./Voronoi.cpp:1184:    Vector3D pos = pp->getPosition();
./Voronoi.cpp:1211:    pp->setPositionCell((cell_basic *)cell);
./Voronoi.cpp:1224:    Vector3D pos = pp->getPosition();
./Voronoi.cpp:1225:    Vector3D dir = pp->getDirection();
./Voronoi.cpp:1233:    cell_vo * center_cell = (cell_vo *)pp->getPositionCell();
./Voronoi.cpp:1337:    pp->setPosition(pos + dir * path_length);
./Voronoi.cpp:1338:    pp->setTmpPathLength(path_length);
./Voronoi.cpp:1351:    cell_oc * tmp_cell_pos = (cell_oc *)pp->getPositionCell();
./Voronoi.cpp:1353:    tmp_pos = pp->getPosition();
./Voronoi.cpp:1383:    pp->setShortestDistance(min_dist);
./Voronoi.cpp:1396:    Vector3D dir = pp->getDirection();
./Voronoi.cpp:1397:    Vector3D pos = pp->getPosition();
./Voronoi.cpp:1462:    pp->setPosition(new_pos);
./Voronoi.cpp:1463:    pp->setTmpPathLength(0);
./Detector.h:622:        uint i_spectral = pp->getWavelengthID();
./Detector.h:623:        StokesVector st = pp->getMultiStokesVector(i_spectral);
./Detector.h:629:        uint i_spectral = pp->getWavelengthID();
./Detector.h:630:        StokesVector st = pp->getMultiStokesVector(i_spectral);
./Detector.h:642:        uint i_spectral = pp->getWavelengthID();
./Detector.h:643:        StokesVector st = pp->getMultiStokesVector(i_spectral);
./Detector.h:644:        Vector3D pos = pp->getPosition();
./Detector.h:666:        Vector3D pos = pp->getPosition();
./Detector.h:667:        Vector3D dir = pp->getDirection();
./Detector.h:685:        StokesVector st = pp->getStokesVector();
./Spherical.h:260:        cell_sp * tmp_cell = (cell_sp *)pp->getPositionCell();
./Spherical.h:263:        double rnd_r = pp->getRND();
./Spherical.h:264:        double rnd_ph = pp->getRND();
./Spherical.h:265:        double rnd_th = pp->getRND();
./Spherical.h:294:        pp->setPosition(pos);
./Spherical.h:397:        cell_basic * cell_pos = pp->getPositionCell();
./Spherical.h:404:        cell_sp * cell_pos = (cell_sp *)pp->getPositionCell();
./Spherical.h:405:        Vector3D pos = pp->getPosition().getSphericalCoord();
./Spherical.h:574:        return isInside(pos, pp->getPositionCell());
./Grid.h:577:            return pp->getPositionCell()->getData(data_pos_vt);
./Grid.h:625:        cell_basic * cell = pp->getPositionCell();
./Grid.h:817:        cell_basic * cell = pp->getPositionCell();
./Grid.h:823:        cell_basic * cell = pp->getPositionCell();
./Grid.h:846:        cell_basic * cell = pp->getPositionCell();
./Grid.h:850:            data_pos = data_offset + 4 * pp->getWavelengthID();
./Grid.h:851:            Vector3D e_dir = len * rotateToCenter(pp, pp->getDirection());
./Grid.h:859:            data_pos = data_offset + pp->getWavelengthID();
./Grid.h:866:        cell_basic * cell = pp->getPositionCell();
./Grid.h:893:        cell_basic * cell = pp->getPositionCell();
./Grid.h:952:        cell_basic * cell = pp->getPositionCell();
./Grid.h:972:        cell_basic * cell = pp->getPositionCell();
./Grid.h:992:        cell_basic * cell = pp->getPositionCell();
./Grid.h:1012:        cell_basic * cell = pp->getPositionCell();
./Grid.h:1020:        cell_basic * cell = pp->getPositionCell();
./Grid.h:1054:        cell_basic * cell = pp->getPositionCell();
./Grid.h:1066:        double phi_map = getAnglePhi(pp->getEX(), pp->getEY(), rot_dir) -
./Grid.h:1067:                         getAnglePhi(pp->getEX(), pp->getEY(), getCenter(pp));
./Grid.h:1091:        cell_basic * cell = pp->getPositionCell();
./Grid.h:1177:        cell_basic * cell = pp->getPositionCell();
./Grid.h:1202:        cell_basic * cell = pp->getPositionCell();
./Grid.h:1213:        pp->setPosition(tx * ex + ty * ey + tz * ez);
./Grid.h:1218:        pp->setPosition(tx * ex + ty * ey - max_len * ez);
./Grid.h:1223:        pp->setEX(ex);
./Grid.h:1224:        pp->setEY(ey);
./Grid.h:1225:        pp->setEZ(ez);
./Grid.h:1230:        pp->setPosition(Vector3D(0, 0, 0));
./Grid.h:1268:        cell_basic * cell = pp->getPositionCell();
./Grid.h:1274:        cell_basic * cell = pp->getPositionCell();
./Grid.h:1280:        cell_basic * cell = pp->getPositionCell();
./Grid.h:1387:	cell_basic * cell = pp->getPositionCell();
./Grid.h:1404:		cell_basic * cell = pp->getPositionCell();
./Grid.h:1418:    	cell_basic * cell = pp->getPositionCell();
./Grid.h:1547:        cell_basic * cell = pp->getPositionCell();
./Grid.h:1570:	cell_basic * cell = pp->getPositionCell();
./Grid.h:1594:		cell_basic * cell = pp->getPositionCell();
./Grid.h:1617:		cell_basic * cell = pp->getPositionCell();
./Grid.h:1637:        cell_basic * cell = pp->getPositionCell();
./Grid.h:1638:        uint id = pp->getWavelengthID();
./Grid.h:1656:        cell_basic * cell = pp->getPositionCell();
./Grid.h:1657:        uint id = pp->getWavelengthID();
./Grid.h:1674:        cell_basic * cell = pp->getPositionCell();
./Grid.h:1675:        uint id = pp->getWavelengthID();
./Grid.h:1694:	cell_basic * cell = pp->getPositionCell();
./Grid.h:1718:	cell_basic * cell = pp->getPositionCell();
./Grid.h:1741:	cell_basic * cell = pp->getPositionCell();
./Grid.h:1765:		cell_basic * cell = pp->getPositionCell();
./Grid.h:1789:		cell_basic * cell = pp->getPositionCell();
./Grid.h:1813:		cell_basic * cell = pp->getPositionCell();
./Grid.h:1837:		cell_basic * cell = pp->getPositionCell();
./Grid.h:1861:		cell_basic * cell = pp->getPositionCell();
./Grid.h:1885:		cell_basic * cell = pp->getPositionCell();
./Grid.h:1909:        cell_basic * cell = pp->getPositionCell();
./Grid.h:1933:        cell_basic * cell = pp->getPositionCell();
./Grid.h:1955:        cell_basic * cell = pp->getPositionCell();
./Grid.h:1968:        cell_basic * cell = pp->getPositionCell();
./Grid.h:1981:        cell_basic * cell = pp->getPositionCell();
./Grid.h:1988:            return uint(pp->getPositionCell()->getData(data_pos_id));
./Grid.h:2003:        return pp->getPositionCell()->getData(data_offset + 6 * i_line);
./Grid.h:2008:        return pp->getPositionCell()->getData(data_offset + 6 * i_line + 1);
./Grid.h:2013:        return pp->getPositionCell()->getData(data_offset + 6 * i_line + 2);
./Grid.h:2018:        return pp->getPositionCell()->getData(data_offset + 6 * i_line + 3);
./Grid.h:2023:        return pp->getPositionCell()->getData(data_offset + 6 * i_line + 4);
./Grid.h:2028:        return pp->getPositionCell()->getData(data_offset + 6 * i_line + 5);
./Grid.h:2040:        pp->getPositionCell()->setData(data_pos_vx, vel.X());
./Grid.h:2041:        pp->getPositionCell()->setData(data_pos_vy, vel.Y());
./Grid.h:2042:        pp->getPositionCell()->setData(data_pos_vz, vel.Z());
./Grid.h:2169:        return pp->getPositionCell()->getData(pos);
./Grid.h:2189:            return pp->getPositionCell()->getData(data_pos_T_e);
./Grid.h:2205:            return pp->getPositionCell()->getData(data_pos_n_th);
./Grid.h:2221:            return pp->getPositionCell()->getData(data_pos_n_cr);
./Grid.h:2237:            return pp->getPositionCell()->getData(data_pos_g_min);
./Grid.h:2245:            return pp->getPositionCell()->getData(data_pos_g_max);
./Grid.h:2253:            return pp->getPositionCell()->getData(data_pos_p);
./Grid.h:2261:            return pp->getPositionCell()->getData(data_pos_avg_th);
./Grid.h:2269:            return pp->getPositionCell()->getData(data_pos_avg_dir);
./Grid.h:2305:        cell_basic * cell = pp->getPositionCell();
./Grid.h:2321:        cell_basic * cell = pp->getPositionCell();
./Grid.h:2335:        cell_basic * cell = pp->getPositionCell();
./Grid.h:2349:        cell_basic * cell = pp->getPositionCell();
./Grid.h:2360:        cell_basic * cell = pp->getPositionCell();
./Grid.h:2468:        pp->setPosition(Vector3D(tx, ty, tz));
./Grid.h:2913:        cell_basic * cell = pp->getPositionCell();
./Grid.h:2919:        cell_basic * cell = pp->getPositionCell();
./Grid.h:2945:        cell_basic * cell = pp->getPositionCell();
./Grid.h:2951:        cell_basic * cell = pp->getPositionCell();
./Grid.h:2977:        cell_basic * cell = pp->getPositionCell();
./Grid.h:2983:        cell_basic * cell = pp->getPositionCell();
./Grid.h:3028:        cell_basic * cell = pp->getPositionCell();
./Grid.h:3034:        cell_basic * cell = pp->getPositionCell();
./Grid.h:3061:        cell_basic * cell = pp->getPositionCell();
./Grid.h:3067:        cell_basic * cell = pp->getPositionCell();
./Grid.h:3112:        Vector3D tmp_dir(pp->getPositionCell()->getData(data_pos_vx),
./Grid.h:3113:                         pp->getPositionCell()->getData(data_pos_vy),
./Grid.h:3114:                         pp->getPositionCell()->getData(data_pos_vz));
./Grid.h:3135:        cell_basic * cell = pp->getPositionCell();
./Grid.h:3165:        Vector3D tmp_dir(pp->getPositionCell()->getData(data_pos_mx),
./Grid.h:3166:                         pp->getPositionCell()->getData(data_pos_my),
./Grid.h:3167:                         pp->getPositionCell()->getData(data_pos_mz));
./Grid.h:3186:        return getAngleTheta(pp->getDirection(), getMagField(pp));
./Grid.h:3191:        return getAnglePhi(pp->getEX(), pp->getEY(), getMagField(pp)) - PI2;
./Grid.h:3201:        return getAngleTheta(pp->getDirection(), dir);
